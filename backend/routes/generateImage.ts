/**
 * Route handler for POST /api/generate-image
 * Accepts a JSON body with a "prompt" string and returns an image URL generated by OpenAI DALLÂ·E.
 * Robust error handling and input validation. Never exposes API key or sensitive info.
 */

import express, { Request, Response, NextFunction } from 'express';
import { openAIImageService } from '../services/openaiImageService';

const router = express.Router();

/**
 * POST /api/generate-image
 * Request body: { "prompt": string }
 * Response: { "imageUrl": string } on success, { "error": string } on error
 */
export async function generateImageHandler(req: Request, res: Response, next: NextFunction) {
  try {
    // Only allow POST
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Method Not Allowed' });
    }

    // Validate content-type
    if (!req.is('application/json')) {
      return res.status(400).json({ error: 'Content-Type must be application/json' });
    }

    const { prompt } = req.body || {};

    // Validate prompt
    if (typeof prompt !== 'string') {
      return res.status(400).json({ error: 'The "prompt" field must be a string.' });
    }
    if (!prompt.trim()) {
      return res.status(400).json({ error: 'The "prompt" field cannot be empty.' });
    }

    // Generate image
    const { imageUrl } = await openAIImageService.generateImage(prompt);

    return res.status(200).json({ imageUrl });
  } catch (err: any) {
    // Map known error messages to status codes
    const msg = err?.message || 'Internal server error';
    if (/authentication failed/i.test(msg)) {
      return res.status(401).json({ error: 'Authentication with image provider failed.' });
    }
    if (/quota exceeded/i.test(msg)) {
      return res.status(429).json({ error: 'Image generation quota exceeded.' });
    }
    if (/service.*unavailable|network error/i.test(msg)) {
      return res.status(503).json({ error: 'Image provider service unavailable.' });
    }
    if (/openai api error/i.test(msg)) {
      return res.status(502).json({ error: 'Image provider API error.' });
    }
    // Fallback: generic error, never leak sensitive info
    return res.status(500).json({ error: 'Internal server error' });
  }
}

// Register the route
router.post('/api/generate-image', express.json(), generateImageHandler);

// For method not allowed (GET, PUT, etc.)
router.all('/api/generate-image', (req, res) => {
  res.status(405).json({ error: 'Method Not Allowed' });
});

export default router;