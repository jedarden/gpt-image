# GitHub Actions Workflow: Multi-Arch Docker Build, Scan, and Push to GHCR (Refactored)
#
# Implements:
# - Single multi-arch manifest build/push per image (no per-arch matrix)
# - Artifact reuse for Trivy scan and registry push (no redundant builds)
# - Robust, event-agnostic tag extraction for all event types (main, PRs, releases, forks, non-semver tags)
# - Persistent Docker build cache across workflow runs
# - Trivy pinned to stable minor version (auto-patch)
# - YAML anchors/aliases to reduce duplication
# - Job-level timeouts
# - OIDC authentication for GHCR (no static secrets)
# - Extensive comments for maintainability

name: Build, Scan, and Push Combined Docker Image to GHCR

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'   # Semantic version tags (e.g., v1.2.3)
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_PLATFORMS: linux/amd64,linux/arm64

jobs:
  combined:
    name: Build, Scan & Push Combined Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR) with OIDC
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          oidc: true

      - name: Extract image tag (robust, event-agnostic)
        id: tag
        shell: bash
        run: |
          TAG="${GITHUB_SHA}"
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            TAG="pr-${{ github.event.pull_request.number }}"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_REF}" == "refs/heads/master" ]]; then
            TAG="latest"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            REF_NAME="${GITHUB_REF#refs/*/}"
            TAG="${REF_NAME//\//-}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Restore Docker build cache (combined)
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-combined
          key: ${{ runner.os }}-buildx-combined-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-combined-

      - name: Build combined image (multi-arch, cached, not pushed yet)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: false
          load: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache-combined
          cache-to: type=local,dest=/tmp/.buildx-cache-combined,mode=max

      - name: Set image_ref output
        id: image_ref
        run: |
          echo "image_ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
# Get Trivy version for granular cache key
- name: Get Trivy version
  id: trivy-version
  run: |
    echo "version=$(trivy --version | grep -oP 'Version: \K[0-9.]+' || echo 'unknown')" >> $GITHUB_OUTPUT

# Cache Trivy vulnerability database for faster, more reliable scans
- name: Cache Trivy vulnerability database
  uses: actions/cache@v4
  with:
    path: ~/.cache/trivy
    key: ${{ runner.os }}-trivy-db-${{ steps.trivy-version.outputs.version }}
    restore-keys: |
      ${{ runner.os }}-trivy-db-

- name: Scan image for vulnerabilities (Trivy)
  uses: aquasecurity/trivy-action@v0.49.0
  with:
    image-ref: ${{ steps.image_ref.outputs.image_ref }}
    format: table
    exit-code: 1
    ignore-unfixed: true
    vuln-type: 'os,library'
    severity: 'CRITICAL'
  continue-on-error: false

# Push combined image to GHCR (multi-arch manifest), add 'latest' tag for semver releases
- name: Push combined image to GHCR (multi-arch manifest)
  uses: docker/build-push-action@v5
  with:
    context: .
    file: ./Dockerfile
    platforms: ${{ env.DOCKER_PLATFORMS }}
    push: true
    tags: |
      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      ${{ startsWith(steps.tag.outputs.tag, 'v') && contains(steps.tag.outputs.tag, '.') && !contains(steps.tag.outputs.tag, '-') && !contains(steps.tag.outputs.tag, 'rc') && !contains(steps.tag.outputs.tag, 'beta') && !contains(steps.tag.outputs.tag, 'alpha') && 'ghcr.io/' + env.IMAGE_NAME + ':latest' || '' }}
    cache-from: type=local,src=/tmp/.buildx-cache-combined
    cache-to: type=local,dest=/tmp/.buildx-cache-combined,mode=max
          cache-to: type=local,dest=/tmp/.buildx-cache-combined,mode=max